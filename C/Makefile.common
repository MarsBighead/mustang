##########################################################################
# Enable options
##########################################################################

ifeq ($(USE_BUILD_MAKE), ON)
    BUILD_TYPE=$(MAKE_BUILD_TYPE)
else
    ifndef BUILD_TYPE
        BUILD_TYPE=Debug
    endif
endif


PROJECT_SOURCE_DIR = $(MUSTANG_TOP_BUILDDIR)
BUILD_MODE=Debug

LDFLAGS=
LIBS= 

ifeq ($(BUILD_TYPE), Debug)
    BUILD_MODE = Debug
    OPTIMIZE_LEVEL = -O0 -g
else ifeq ($(BUILD_TYPE), Release)
    BUILD_MODE = Release
    OPTIMIZE_LEVEL = -O2 -g3
else
    $(error unsupported BUILD_TYPE is $(BUILD_TYPE))
endif


COMM_INC = $(PROJECT_SOURCE_DIR)/src/include \
    $(PROJECT_SOURCE_DIR)/src/include/socket

IMPL_CFLAGS = -std=c99 -D_XOPEN_SOURCE=600 \
		-D_DEFAULT_SOURCE \
		-pedantic \
		-Wall \
		-W \
		-Wmissing-prototypes \
		-Wno-sign-compare \
		-Wimplicit-fallthrough \
		-Wno-unused-parameter
IMPL_CFLAGS += $(OPTIMIZE_LEVEL)


# clang(1) is a little more zealous than gcc(1) with respect to some warnings.
# Suppress those warnings (which, at least in the book code, relate to code
# that is fine).

ifeq ($(CC),clang)
	IMPL_CFLAGS += -Wno-uninitialized -Wno-infinite-recursion \
			-Wno-format-pedantic
endif

CFLAGS = ${IMPL_CFLAGS}

CPPFLAGS += $(addprefix -I,$(COMM_INC))
IMPL_THREAD_FLAGS = -pthread

IMPL_LDLIBS = ${TLPI_LIB}

#MUSTANG_BASE_LIBS = libmustang.a libcommon.a
#MUSTANG_BASE_LIBS = mustang common
MUSTANG_BASE_LIBS = mustang
MUSTANG_LIBS = $(PROJECT_SOURCE_DIR)/src/lib \
			$(PROJECT_SOURCE_DIR)/src/common

LDLIBS = $(addprefix -L,$(MUSTANG_LIBS))

LDFLAGS += $(addprefix -L,$(MUSTANG_LIBS))
RM = rm -rf


##########################################################################
# Recursive make support
##########################################################################
# ----------------------
# Instead of recursing through subdirectories with a for loop or
# repeated $(MAKE) -C whatever calls, this is a little smarter: it
# allows parallel make across directories and lets make -k and -q work
# correctly.

# We need the $(eval) function and order-only prerequisites, which are
# available in GNU make 3.80.  That also happens to be the version
# where the .VARIABLES variable was introduced, so this is a simple check.
ifndef .VARIABLES
$(error GNU make 3.80 or newer is required.  You are using version $(MAKE_VERSION))
endif

# This function is only for internal use below.  It should be called
# using $(eval).  It will set up a target so that it recurses into
# a given subdirectory.  Note that to avoid a nasty bug in make 3.80,
# this function has to avoid using any complicated constructs (like
# multiple targets on a line) and also not contain any lines that expand
# to more than about 200 bytes.  This is why we make it apply to just one
# subdirectory at a time, rather than to a list of subdirectories.
# $1: target name, e.g., all
# $2: subdir name
# $3: target to run in subdir, usually same as $1
standard_targets = all install installdirs uninstall distprep clean distclean maintainer-clean coverage check installcheck maintainer-check 2pccheck
define _create_recursive_target
.PHONY: $(1)-$(2)-recurse
$(1): $(1)-$(2)-recurse
$(1)-$(2)-recurse:
	$$(MAKE) -C $(2) $(3)
endef
# Note that the use of $$ on the last line above is important; we want
# $(MAKE) to be evaluated when the rule is run, not when the $(eval) is run
# to create the rule.  This is necessary to get make -q working.

# Call this function in a makefile that needs to recurse into subdirectories.
# In the normal case all arguments can be defaulted.
# $1: targets to make recursive (defaults to list of standard targets)
# $2: list of subdirs (defaults to SUBDIRS variable)
# $3: target to run in subdir (defaults to current element of $1)
recurse = $(foreach target,$(if $1,$1,$(standard_targets)),$(foreach subdir,$(if $2,$2,$(SUBDIRS)),$(eval $(call _create_recursive_target,$(target),$(subdir),$(if $3,$3,$(target))))))

# If a makefile's list of SUBDIRS varies depending on configuration, then
# any subdirectories excluded from SUBDIRS should instead be added to
# ALWAYS_SUBDIRS, and then it must call recurse_always as well as recurse.
# This ensures that distprep, distclean, etc will apply to all subdirectories.
# In the normal case all arguments will be defaulted.
# $1: targets to make recursive (defaults to standard_always_targets)
# $2: list of subdirs (defaults to ALWAYS_SUBDIRS variable)
# $3: target to run in subdir (defaults to current element of $1)
recurse_always = $(foreach target,$(if $1,$1,$(standard_always_targets)),$(foreach subdir,$(if $2,$2,$(ALWAYS_SUBDIRS)),$(eval $(call _create_recursive_target,$(target),$(subdir),$(if $3,$3,$(target))))))